#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
typedef struct nodetype
{
    int coeff;
    int power;
    struct nodetype *next;

} node;
void main (){
node *poly1, *poly2, *poly;
int choice, element, after, before;

void readPolynomial ( node ** );
 void printPolynomial ( node * );

void addpolynomial(node*, node *, node **);
void addNode( node **, float, int );
 void deletePolynomial( node **);
 Poly1 = poly2 = Poly3 = NULL;
cirscr ();
printf("\nProgram to add two polynomials" );

printf( "Enter first polynomial \n" );
 readPolynomia1 ( &poly1 );
printf("'In'nEnter second polynomial \n" );
 readPolynomial ( &poly2 );
addPolynomial ( poly1, poly2, &poly3 );
 printf ( "\nSum. of polynomials \n" );
 printPolynomial ( poly1);
printf("\nand\n" );
printPolynomial( poly2 );
 printf ( "\nis\n" );
  printPolynomial ( poly3 );
getch () ;
deletePolynomial ( &poly1 );
 deletePolynomial ( &poly2 );
 deletePolynomial ( &poly3 );}
 void addNode( node **ptr, int coef, int powe ){
node *tempPtr;
tempPtr = ( node * ) malloc ( sizeof ( node ) );
tempPtr->coeff = coef;
tempPtr->power = powe;
if ( *ptr == NULL )
{
tempPtr->next = NULL;
*ptr = tempPtr;}
else
{
tempPtr->next = *ptr;
*ptr = tempPtr;
}}
void readPolynomial(node **p){
int coeficient, power;
printf ( "\nEnter the terms in the ascending order of power" );
while (1)
{ printf("\nenter the degree of x : " );
scanf( "%d", &power );
printf( "Enter its coefficient: " );
scanf ( "%f", &coeficient );
 addNode ( p, coeficient, power );
printf( "\nAny More term (Y/N) ? : " );
if ( toupper (getch () )=='y' )
break;
}}
 void printPolynomial ( node *ptr )
{
if ( ptr != NULL)
printf("&dx^%d", ptr->coeff, ptr->power );
for ( ptr = ptr->next; ptr != NULL; ptr = ptr->next )
{
if ( ptr->coeff > 0 )
printf (" + " );
if ( ptr->power == 0 )
printe( "%d", ptr->coeff );
else if ( ptr->power == 1 )
printf("%dx", ptr->coeff);
else 
print( "%dx^%d", ptr->coeff, ptr->power);
}}

void addPolynomial( node *ptr1, node *ptr2, node **ptr3)
{
int powe;
 float coef;
while ( ( ptr1 != NULL) && ( ptr2 != NULL) )
{
if ( ptr1->power > ptr2->power ) {
coef = ptr1->coeff; powe = ptr1->power;
ptr1 = ptr1->next;
}
else if ( ptr1->power < ptr2->power ) {
coef = ptr2->coeff;
powe = ptr2->power;
ptr2 = ptr2->next;}
else{
coef = ptr1->coeff + ptr2->coeff;
 powe = ptr1->power; 
 ptr1 = ptr1->next; 
 ptr2 = ptr2->next;
}
if ( coef != 0 )
addNode ( ptr3, coef, powe );
}
if ( ptr1 == NULL) {
for ( ; ptr2 != NULL; ptr2 = ptr2->next )
}
else if ( ptr2 == NULL) {
addNode ( ptr3, ptr2->coeff, ptr2->power );
for ( ; ptr1 != NULL; ptr1 = ptr1->next ) 
addNode ( ptr3, ptr1->coeff, ptr1->power );
 }}
  void deletePolynomial ( node **ptr ){
node *temp;
while ( *ptr != NULL )
{
temp = *ptr;
*ptr = (*ptr) ->next;
free ( temp)  }
}
